//  1. Дан код:
var a = 1, b = 1, c, d;

c = ++a; alert(c);           // 2
//  сначала переменная а увеличивается на единицу, а затем выдает для присваивания уже новое значение

d = b++; alert(d);           // 1
//  сначала переменная d принимает текущее значение b, а только потом увеличивается значение переменной b

c = (2+ ++a); alert(c);      // 5
//  к 2 прибавляется предварительно увеличенное значение (2) переменной a (2 -> 3)

d = (2+ b++); alert(d);      // 4
// сначала к 2 прибавляется текущее значение b (2), а только потом увеличивается значение b

alert(a);                    // 3
//  значение переменной а дважды увеличивалось в разных выражениях выше (сначала prepand а потом append)

alert(b);                    // 3
//  эта переменная дважды увеливалась на единицу во всем коде

//  Почему код даёт именно такие результаты?
//  -> Эти переменнные объявлены в одном контексте (в корне скрипта), и благополучно меняют свои значения от строки к строке, от выражения к выражению


//  2. Чему будет равен x в примере ниже?
var a = 2;
var x = 1 + (a *= 2);
//  По законам арифметики, (и законам приоритета программировании, сначала выполняются выражения в скобках, а затем что вовне:
//    а. значение переменной умножается на два и результат присаивается ей же 
//    б. результат скобок слагается с единицей


//  3. Объявить две целочисленные переменные a и b и задать им произвольные начальные значения. Затем написать скрипт, который работает по следующему принципу:
//      если a и b положительные, вывести их разность;
//      если а и b отрицательные, вывести их произведение;
//      если а и b разных знаков, вывести их сумму; ноль можно считать положительным числом.
function workout2numbers(a, b){
    //let a = -5;	//+prompt("A:");
    //let b = 20; //+prompt("B:");
    let outStr;
    if(a>=0 && b>=0){
    outStr = "diff "+a+" - "+b+" = "+(a - b);
    }else if(a<0 && b< 0){
    outStr = "multiply "+a+" * "+b+" = "+(a * b);
    }else if( (a<0 && b>=0) || (a>=0 && b<0)){
    outStr = "sum "+a+" + "+b+ " = "+(a + b);
    }
    //alert(outStr);
    return outStr;
}


//  4. Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15.
function task_2_4(a){
    //  0 ... 15
    var outStr;
    switch (a) {
        case 0:
            outStr = "0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15";
            break;
        case 1:
            outStr = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15";
            break;
        case 2:
            outStr = "2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15";
            break;
        case 3:
            outStr = "3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15";
            break;
        case 4:
            outStr = "4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15";
            break;
        case 5:
            outStr = "5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15";
            break;
        case 6:
            outStr = "6, 7, 8, 9, 10, 11, 12, 13, 14, 15";
            break;
        case 7:
            outStr = "7, 8, 9, 10, 11, 12, 13, 14, 15";
            break;
        case 8:
            outStr = "8, 9, 10, 11, 12, 13, 14, 15";
            break;
        case 9:
            outStr = "9, 10, 11, 12, 13, 14, 15";
            break;
        case 10:
            outStr = "10, 11, 12, 13, 14, 15";
            break;
        case 11:
            outStr = "11, 12, 13, 14, 15";
            break;
        case 12:
            outStr = "12, 13, 14, 15";
            break;
        case 13:
            outStr = "13, 14, 15";
            break;
        case 14:
            outStr = "14, 15";
            break;
        case 15:
            outStr = "15";
            break;
    }
    return outStr;
}


//  5. Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return.
function numsSum(a, b){
    return a + b;
}
function numsDiff(a, b){
    return a - b;
}
function numsMult(a, b){
    return a * b;
}
function numsDiv(a, b){
    return a / b;
}


//  6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), где arg1, arg2 – значения аргументов, operation – строка с названием операции. В зависимости от переданного значения операции выполнить одну из арифметических операций (использовать функции из пункта 5) и вернуть полученное значение (использовать switch).
var SUM = "+";
var DIFF = "-";
var MULT = "*";
var DIV = "/";
function mathOperation(arg1, arg2, operation=SUM){
    switch(operation){
        case SUM:
            return numsSum(arg1, arg2);
        case DIFF:
            return numsDiff(arg1, arg2);
        case MULT:
            return numsMult(arg1, arg2);
        case DIV:
            return numsDiv(arg1, arg2);
    }
}


//  7. *Сравнить null и 0. Попробуйте объяснить результат.
//      fals, ибо это разные значения:
//      0 -- это конкретное число, у этого объекта есть класс number и его можно использовать в арифметических операциях
//      null -- выступает в качестве заглушки. Это прям таки антагонист 'undefined' (пустота) - то есть 'defined' (весомое).
  

//  8. *С помощью рекурсии организовать функцию возведения числа в степень. Формат: function power(val, pow), где val – заданное число, pow – степень.
function power(val, pow){
    if(pow==0)
    	return 1;
    else
        return val * power(val, pow-1);
}
